//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from HuskyLang.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class HuskyLangParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, INT=4, DOUBLE=5, PI=6, E=7, POW=8, ID=9, CHAR=10, 
		PLUS=11, MINUS=12, MULT=13, DIV=14, EQUAL=15, GTE=16, GT=17, LTE=18, LT=19, 
		NEQ=20, AND=21, OR=22, NOT=23, LPAR=24, RPAR=25, WS=26, NL=27;
	public const int
		RULE_statement = 0, RULE_expression = 1, RULE_logical = 2, RULE_compare = 3, 
		RULE_plusOrMinus = 4, RULE_multOrDiv = 5, RULE_unary = 6, RULE_powr = 7, 
		RULE_atom = 8, RULE_argList = 9, RULE_identifier = 10, RULE_literal = 11;
	public static readonly string[] ruleNames = {
		"statement", "expression", "logical", "compare", "plusOrMinus", "multOrDiv", 
		"unary", "powr", "atom", "argList", "identifier", "literal"
	};

	private static readonly string[] _LiteralNames = {
		null, "'['", "']'", "','", null, null, "'pi'", "'e'", "'^'", null, null, 
		"'+'", "'-'", "'*'", "'/'", "'='", "'>='", "'>'", "'<='", "'<'", null, 
		"'&'", "'|'", "'!'", "'('", "')'", null, "'\\n'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "INT", "DOUBLE", "PI", "E", "POW", "ID", "CHAR", 
		"PLUS", "MINUS", "MULT", "DIV", "EQUAL", "GTE", "GT", "LTE", "LT", "NEQ", 
		"AND", "OR", "NOT", "LPAR", "RPAR", "WS", "NL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "HuskyLang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static HuskyLangParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public HuskyLangParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public HuskyLangParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ToExpressionContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(HuskyLangParser.Eof, 0); }
		public ToExpressionContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHuskyLangVisitor<TResult> typedVisitor = visitor as IHuskyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 0, RULE_statement);
		try {
			_localctx = new ToExpressionContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 24;
			expression();
			State = 25;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ToLogicalContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicalContext logical() {
			return GetRuleContext<LogicalContext>(0);
		}
		public ToLogicalContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHuskyLangVisitor<TResult> typedVisitor = visitor as IHuskyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToLogical(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 2, RULE_expression);
		try {
			_localctx = new ToLogicalContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 27;
			logical(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalContext : ParserRuleContext {
		public LogicalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical; } }
	 
		public LogicalContext() { }
		public virtual void CopyFrom(LogicalContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LogicalOpContext : LogicalContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public LogicalContext logical() {
			return GetRuleContext<LogicalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompareContext compare() {
			return GetRuleContext<CompareContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(HuskyLangParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(HuskyLangParser.OR, 0); }
		public LogicalOpContext(LogicalContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHuskyLangVisitor<TResult> typedVisitor = visitor as IHuskyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ToCompareContext : LogicalContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompareContext compare() {
			return GetRuleContext<CompareContext>(0);
		}
		public ToCompareContext(LogicalContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHuskyLangVisitor<TResult> typedVisitor = visitor as IHuskyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToCompare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalContext logical() {
		return logical(0);
	}

	private LogicalContext logical(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LogicalContext _localctx = new LogicalContext(Context, _parentState);
		LogicalContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_logical, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ToCompareContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 30;
			compare(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 40;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 38;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
					case 1:
						{
						_localctx = new LogicalOpContext(new LogicalContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_logical);
						State = 32;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 33;
						((LogicalOpContext)_localctx).op = Match(AND);
						State = 34;
						compare(0);
						}
						break;
					case 2:
						{
						_localctx = new LogicalOpContext(new LogicalContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_logical);
						State = 35;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 36;
						((LogicalOpContext)_localctx).op = Match(OR);
						State = 37;
						compare(0);
						}
						break;
					}
					} 
				}
				State = 42;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CompareContext : ParserRuleContext {
		public CompareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compare; } }
	 
		public CompareContext() { }
		public virtual void CopyFrom(CompareContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ToPlusOrMinusContext : CompareContext {
		[System.Diagnostics.DebuggerNonUserCode] public PlusOrMinusContext plusOrMinus() {
			return GetRuleContext<PlusOrMinusContext>(0);
		}
		public ToPlusOrMinusContext(CompareContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHuskyLangVisitor<TResult> typedVisitor = visitor as IHuskyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToPlusOrMinus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CompareOpContext : CompareContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public CompareContext compare() {
			return GetRuleContext<CompareContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PlusOrMinusContext plusOrMinus() {
			return GetRuleContext<PlusOrMinusContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(HuskyLangParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ() { return GetToken(HuskyLangParser.NEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(HuskyLangParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTE() { return GetToken(HuskyLangParser.GTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(HuskyLangParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTE() { return GetToken(HuskyLangParser.LTE, 0); }
		public CompareOpContext(CompareContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHuskyLangVisitor<TResult> typedVisitor = visitor as IHuskyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareContext compare() {
		return compare(0);
	}

	private CompareContext compare(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		CompareContext _localctx = new CompareContext(Context, _parentState);
		CompareContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_compare, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ToPlusOrMinusContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 44;
			plusOrMinus(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 66;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 64;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
					case 1:
						{
						_localctx = new CompareOpContext(new CompareContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_compare);
						State = 46;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 47;
						((CompareOpContext)_localctx).op = Match(EQUAL);
						State = 48;
						plusOrMinus(0);
						}
						break;
					case 2:
						{
						_localctx = new CompareOpContext(new CompareContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_compare);
						State = 49;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 50;
						((CompareOpContext)_localctx).op = Match(NEQ);
						State = 51;
						plusOrMinus(0);
						}
						break;
					case 3:
						{
						_localctx = new CompareOpContext(new CompareContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_compare);
						State = 52;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 53;
						((CompareOpContext)_localctx).op = Match(GT);
						State = 54;
						plusOrMinus(0);
						}
						break;
					case 4:
						{
						_localctx = new CompareOpContext(new CompareContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_compare);
						State = 55;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 56;
						((CompareOpContext)_localctx).op = Match(GTE);
						State = 57;
						plusOrMinus(0);
						}
						break;
					case 5:
						{
						_localctx = new CompareOpContext(new CompareContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_compare);
						State = 58;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 59;
						((CompareOpContext)_localctx).op = Match(LT);
						State = 60;
						plusOrMinus(0);
						}
						break;
					case 6:
						{
						_localctx = new CompareOpContext(new CompareContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_compare);
						State = 61;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 62;
						((CompareOpContext)_localctx).op = Match(LTE);
						State = 63;
						plusOrMinus(0);
						}
						break;
					}
					} 
				}
				State = 68;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PlusOrMinusContext : ParserRuleContext {
		public PlusOrMinusContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plusOrMinus; } }
	 
		public PlusOrMinusContext() { }
		public virtual void CopyFrom(PlusOrMinusContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ToMultOrDivContext : PlusOrMinusContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultOrDivContext multOrDiv() {
			return GetRuleContext<MultOrDivContext>(0);
		}
		public ToMultOrDivContext(PlusOrMinusContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHuskyLangVisitor<TResult> typedVisitor = visitor as IHuskyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToMultOrDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddSubOpContext : PlusOrMinusContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public PlusOrMinusContext plusOrMinus() {
			return GetRuleContext<PlusOrMinusContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultOrDivContext multOrDiv() {
			return GetRuleContext<MultOrDivContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(HuskyLangParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(HuskyLangParser.MINUS, 0); }
		public AddSubOpContext(PlusOrMinusContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHuskyLangVisitor<TResult> typedVisitor = visitor as IHuskyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddSubOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlusOrMinusContext plusOrMinus() {
		return plusOrMinus(0);
	}

	private PlusOrMinusContext plusOrMinus(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PlusOrMinusContext _localctx = new PlusOrMinusContext(Context, _parentState);
		PlusOrMinusContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_plusOrMinus, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ToMultOrDivContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 70;
			multOrDiv(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 80;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 78;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
					case 1:
						{
						_localctx = new AddSubOpContext(new PlusOrMinusContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_plusOrMinus);
						State = 72;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 73;
						((AddSubOpContext)_localctx).op = Match(PLUS);
						State = 74;
						multOrDiv(0);
						}
						break;
					case 2:
						{
						_localctx = new AddSubOpContext(new PlusOrMinusContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_plusOrMinus);
						State = 75;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 76;
						((AddSubOpContext)_localctx).op = Match(MINUS);
						State = 77;
						multOrDiv(0);
						}
						break;
					}
					} 
				}
				State = 82;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultOrDivContext : ParserRuleContext {
		public MultOrDivContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multOrDiv; } }
	 
		public MultOrDivContext() { }
		public virtual void CopyFrom(MultOrDivContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ToUnaryContext : MultOrDivContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryContext unary() {
			return GetRuleContext<UnaryContext>(0);
		}
		public ToUnaryContext(MultOrDivContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHuskyLangVisitor<TResult> typedVisitor = visitor as IHuskyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToUnary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiDivOpContext : MultOrDivContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public MultOrDivContext multOrDiv() {
			return GetRuleContext<MultOrDivContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PowrContext powr() {
			return GetRuleContext<PowrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(HuskyLangParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(HuskyLangParser.DIV, 0); }
		public MultiDivOpContext(MultOrDivContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHuskyLangVisitor<TResult> typedVisitor = visitor as IHuskyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiDivOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultOrDivContext multOrDiv() {
		return multOrDiv(0);
	}

	private MultOrDivContext multOrDiv(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MultOrDivContext _localctx = new MultOrDivContext(Context, _parentState);
		MultOrDivContext _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_multOrDiv, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ToUnaryContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 84;
			unary();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 94;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 92;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
					case 1:
						{
						_localctx = new MultiDivOpContext(new MultOrDivContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_multOrDiv);
						State = 86;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 87;
						((MultiDivOpContext)_localctx).op = Match(MULT);
						State = 88;
						powr(0);
						}
						break;
					case 2:
						{
						_localctx = new MultiDivOpContext(new MultOrDivContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_multOrDiv);
						State = 89;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 90;
						((MultiDivOpContext)_localctx).op = Match(DIV);
						State = 91;
						powr(0);
						}
						break;
					}
					} 
				}
				State = 96;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UnaryContext : ParserRuleContext {
		public UnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary; } }
	 
		public UnaryContext() { }
		public virtual void CopyFrom(UnaryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnaryOpContext : UnaryContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public PowrContext powr() {
			return GetRuleContext<PowrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(HuskyLangParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(HuskyLangParser.NOT, 0); }
		public UnaryOpContext(UnaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHuskyLangVisitor<TResult> typedVisitor = visitor as IHuskyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ToPowerContext : UnaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public PowrContext powr() {
			return GetRuleContext<PowrContext>(0);
		}
		public ToPowerContext(UnaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHuskyLangVisitor<TResult> typedVisitor = visitor as IHuskyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToPower(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryContext unary() {
		UnaryContext _localctx = new UnaryContext(Context, State);
		EnterRule(_localctx, 12, RULE_unary);
		try {
			State = 102;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MINUS:
				_localctx = new UnaryOpContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 97;
				((UnaryOpContext)_localctx).op = Match(MINUS);
				State = 98;
				powr(0);
				}
				break;
			case NOT:
				_localctx = new UnaryOpContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 99;
				((UnaryOpContext)_localctx).op = Match(NOT);
				State = 100;
				powr(0);
				}
				break;
			case INT:
			case DOUBLE:
			case PI:
			case E:
			case ID:
			case LPAR:
				_localctx = new ToPowerContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 101;
				powr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PowrContext : ParserRuleContext {
		public PowrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_powr; } }
	 
		public PowrContext() { }
		public virtual void CopyFrom(PowrContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ToAtomContext : PowrContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public ToAtomContext(PowrContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHuskyLangVisitor<TResult> typedVisitor = visitor as IHuskyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PowerContext : PowrContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public PowrContext powr() {
			return GetRuleContext<PowrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POW() { return GetToken(HuskyLangParser.POW, 0); }
		public PowerContext(PowrContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHuskyLangVisitor<TResult> typedVisitor = visitor as IHuskyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPower(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PowrContext powr() {
		return powr(0);
	}

	private PowrContext powr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PowrContext _localctx = new PowrContext(Context, _parentState);
		PowrContext _prevctx = _localctx;
		int _startState = 14;
		EnterRecursionRule(_localctx, 14, RULE_powr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ToAtomContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 105;
			atom();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 112;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PowerContext(new PowrContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_powr);
					State = 107;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 108;
					((PowerContext)_localctx).op = Match(POW);
					State = 109;
					atom();
					}
					} 
				}
				State = 114;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
	 
		public AtomContext() { }
		public virtual void CopyFrom(AtomContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FuncCallContext : AtomContext {
		public IdentifierContext functionName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(HuskyLangParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(HuskyLangParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public FuncCallContext(AtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHuskyLangVisitor<TResult> typedVisitor = visitor as IHuskyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BracesContext : AtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(HuskyLangParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(HuskyLangParser.RPAR, 0); }
		public BracesContext(AtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHuskyLangVisitor<TResult> typedVisitor = visitor as IHuskyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBraces(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ToIdentifierContext : AtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ToIdentifierContext(AtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHuskyLangVisitor<TResult> typedVisitor = visitor as IHuskyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ToLiteralContext : AtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ToLiteralContext(AtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHuskyLangVisitor<TResult> typedVisitor = visitor as IHuskyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayIndexContext : AtomContext {
		public IdentifierContext indexable;
		public ExpressionContext index;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArrayIndexContext(AtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHuskyLangVisitor<TResult> typedVisitor = visitor as IHuskyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 16, RULE_atom);
		int _la;
		try {
			State = 133;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				_localctx = new ToLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 115;
				literal();
				}
				break;
			case 2:
				_localctx = new ToIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 116;
				identifier();
				}
				break;
			case 3:
				_localctx = new FuncCallContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 117;
				((FuncCallContext)_localctx).functionName = identifier();
				State = 118;
				Match(LPAR);
				State = 120;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << DOUBLE) | (1L << PI) | (1L << E) | (1L << ID) | (1L << MINUS) | (1L << NOT) | (1L << LPAR))) != 0)) {
					{
					State = 119;
					argList(0);
					}
				}

				State = 122;
				Match(RPAR);
				}
				break;
			case 4:
				_localctx = new BracesContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 124;
				Match(LPAR);
				State = 125;
				expression();
				State = 126;
				Match(RPAR);
				}
				break;
			case 5:
				_localctx = new ArrayIndexContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 128;
				((ArrayIndexContext)_localctx).indexable = identifier();
				State = 129;
				Match(T__0);
				State = 130;
				((ArrayIndexContext)_localctx).index = expression();
				State = 131;
				Match(T__1);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHuskyLangVisitor<TResult> typedVisitor = visitor as IHuskyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgListContext argList() {
		return argList(0);
	}

	private ArgListContext argList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ArgListContext _localctx = new ArgListContext(Context, _parentState);
		ArgListContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_argList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 136;
			expression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 143;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ArgListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_argList);
					State = 138;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 139;
					Match(T__2);
					State = 140;
					expression();
					}
					} 
				}
				State = 145;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(HuskyLangParser.ID, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHuskyLangVisitor<TResult> typedVisitor = visitor as IHuskyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 20, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	 
		public LiteralContext() { }
		public virtual void CopyFrom(LiteralContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConstantPIContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PI() { return GetToken(HuskyLangParser.PI, 0); }
		public ConstantPIContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHuskyLangVisitor<TResult> typedVisitor = visitor as IHuskyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantPI(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstantEContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode E() { return GetToken(HuskyLangParser.E, 0); }
		public ConstantEContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHuskyLangVisitor<TResult> typedVisitor = visitor as IHuskyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantE(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoubleContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(HuskyLangParser.DOUBLE, 0); }
		public DoubleContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHuskyLangVisitor<TResult> typedVisitor = visitor as IHuskyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDouble(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(HuskyLangParser.INT, 0); }
		public IntContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHuskyLangVisitor<TResult> typedVisitor = visitor as IHuskyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 22, RULE_literal);
		try {
			State = 152;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PI:
				_localctx = new ConstantPIContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 148;
				Match(PI);
				}
				break;
			case E:
				_localctx = new ConstantEContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 149;
				Match(E);
				}
				break;
			case DOUBLE:
				_localctx = new DoubleContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 150;
				Match(DOUBLE);
				}
				break;
			case INT:
				_localctx = new IntContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 151;
				Match(INT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return logical_sempred((LogicalContext)_localctx, predIndex);
		case 3: return compare_sempred((CompareContext)_localctx, predIndex);
		case 4: return plusOrMinus_sempred((PlusOrMinusContext)_localctx, predIndex);
		case 5: return multOrDiv_sempred((MultOrDivContext)_localctx, predIndex);
		case 7: return powr_sempred((PowrContext)_localctx, predIndex);
		case 9: return argList_sempred((ArgListContext)_localctx, predIndex);
		}
		return true;
	}
	private bool logical_sempred(LogicalContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		case 1: return Precpred(Context, 2);
		}
		return true;
	}
	private bool compare_sempred(CompareContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 7);
		case 3: return Precpred(Context, 6);
		case 4: return Precpred(Context, 5);
		case 5: return Precpred(Context, 4);
		case 6: return Precpred(Context, 3);
		case 7: return Precpred(Context, 2);
		}
		return true;
	}
	private bool plusOrMinus_sempred(PlusOrMinusContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Precpred(Context, 3);
		case 9: return Precpred(Context, 2);
		}
		return true;
	}
	private bool multOrDiv_sempred(MultOrDivContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return Precpred(Context, 3);
		case 11: return Precpred(Context, 2);
		}
		return true;
	}
	private bool powr_sempred(PowrContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12: return Precpred(Context, 2);
		}
		return true;
	}
	private bool argList_sempred(ArgListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 13: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,27,155,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,39,8,2,10,2,12,2,42,9,2,1,3,1,3,1,3,1,3,
		1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,5,
		3,65,8,3,10,3,12,3,68,9,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,5,4,79,8,
		4,10,4,12,4,82,9,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,5,5,93,8,5,10,5,
		12,5,96,9,5,1,6,1,6,1,6,1,6,1,6,3,6,103,8,6,1,7,1,7,1,7,1,7,1,7,1,7,5,
		7,111,8,7,10,7,12,7,114,9,7,1,8,1,8,1,8,1,8,1,8,3,8,121,8,8,1,8,1,8,1,
		8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,134,8,8,1,9,1,9,1,9,1,9,1,9,1,9,
		5,9,142,8,9,10,9,12,9,145,9,9,1,10,1,10,1,11,1,11,1,11,1,11,3,11,153,8,
		11,1,11,0,6,4,6,8,10,14,18,12,0,2,4,6,8,10,12,14,16,18,20,22,0,0,166,0,
		24,1,0,0,0,2,27,1,0,0,0,4,29,1,0,0,0,6,43,1,0,0,0,8,69,1,0,0,0,10,83,1,
		0,0,0,12,102,1,0,0,0,14,104,1,0,0,0,16,133,1,0,0,0,18,135,1,0,0,0,20,146,
		1,0,0,0,22,152,1,0,0,0,24,25,3,2,1,0,25,26,5,0,0,1,26,1,1,0,0,0,27,28,
		3,4,2,0,28,3,1,0,0,0,29,30,6,2,-1,0,30,31,3,6,3,0,31,40,1,0,0,0,32,33,
		10,3,0,0,33,34,5,21,0,0,34,39,3,6,3,0,35,36,10,2,0,0,36,37,5,22,0,0,37,
		39,3,6,3,0,38,32,1,0,0,0,38,35,1,0,0,0,39,42,1,0,0,0,40,38,1,0,0,0,40,
		41,1,0,0,0,41,5,1,0,0,0,42,40,1,0,0,0,43,44,6,3,-1,0,44,45,3,8,4,0,45,
		66,1,0,0,0,46,47,10,7,0,0,47,48,5,15,0,0,48,65,3,8,4,0,49,50,10,6,0,0,
		50,51,5,20,0,0,51,65,3,8,4,0,52,53,10,5,0,0,53,54,5,17,0,0,54,65,3,8,4,
		0,55,56,10,4,0,0,56,57,5,16,0,0,57,65,3,8,4,0,58,59,10,3,0,0,59,60,5,19,
		0,0,60,65,3,8,4,0,61,62,10,2,0,0,62,63,5,18,0,0,63,65,3,8,4,0,64,46,1,
		0,0,0,64,49,1,0,0,0,64,52,1,0,0,0,64,55,1,0,0,0,64,58,1,0,0,0,64,61,1,
		0,0,0,65,68,1,0,0,0,66,64,1,0,0,0,66,67,1,0,0,0,67,7,1,0,0,0,68,66,1,0,
		0,0,69,70,6,4,-1,0,70,71,3,10,5,0,71,80,1,0,0,0,72,73,10,3,0,0,73,74,5,
		11,0,0,74,79,3,10,5,0,75,76,10,2,0,0,76,77,5,12,0,0,77,79,3,10,5,0,78,
		72,1,0,0,0,78,75,1,0,0,0,79,82,1,0,0,0,80,78,1,0,0,0,80,81,1,0,0,0,81,
		9,1,0,0,0,82,80,1,0,0,0,83,84,6,5,-1,0,84,85,3,12,6,0,85,94,1,0,0,0,86,
		87,10,3,0,0,87,88,5,13,0,0,88,93,3,14,7,0,89,90,10,2,0,0,90,91,5,14,0,
		0,91,93,3,14,7,0,92,86,1,0,0,0,92,89,1,0,0,0,93,96,1,0,0,0,94,92,1,0,0,
		0,94,95,1,0,0,0,95,11,1,0,0,0,96,94,1,0,0,0,97,98,5,12,0,0,98,103,3,14,
		7,0,99,100,5,23,0,0,100,103,3,14,7,0,101,103,3,14,7,0,102,97,1,0,0,0,102,
		99,1,0,0,0,102,101,1,0,0,0,103,13,1,0,0,0,104,105,6,7,-1,0,105,106,3,16,
		8,0,106,112,1,0,0,0,107,108,10,2,0,0,108,109,5,8,0,0,109,111,3,16,8,0,
		110,107,1,0,0,0,111,114,1,0,0,0,112,110,1,0,0,0,112,113,1,0,0,0,113,15,
		1,0,0,0,114,112,1,0,0,0,115,134,3,22,11,0,116,134,3,20,10,0,117,118,3,
		20,10,0,118,120,5,24,0,0,119,121,3,18,9,0,120,119,1,0,0,0,120,121,1,0,
		0,0,121,122,1,0,0,0,122,123,5,25,0,0,123,134,1,0,0,0,124,125,5,24,0,0,
		125,126,3,2,1,0,126,127,5,25,0,0,127,134,1,0,0,0,128,129,3,20,10,0,129,
		130,5,1,0,0,130,131,3,2,1,0,131,132,5,2,0,0,132,134,1,0,0,0,133,115,1,
		0,0,0,133,116,1,0,0,0,133,117,1,0,0,0,133,124,1,0,0,0,133,128,1,0,0,0,
		134,17,1,0,0,0,135,136,6,9,-1,0,136,137,3,2,1,0,137,143,1,0,0,0,138,139,
		10,2,0,0,139,140,5,3,0,0,140,142,3,2,1,0,141,138,1,0,0,0,142,145,1,0,0,
		0,143,141,1,0,0,0,143,144,1,0,0,0,144,19,1,0,0,0,145,143,1,0,0,0,146,147,
		5,9,0,0,147,21,1,0,0,0,148,153,5,6,0,0,149,153,5,7,0,0,150,153,5,5,0,0,
		151,153,5,4,0,0,152,148,1,0,0,0,152,149,1,0,0,0,152,150,1,0,0,0,152,151,
		1,0,0,0,153,23,1,0,0,0,14,38,40,64,66,78,80,92,94,102,112,120,133,143,
		152
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}

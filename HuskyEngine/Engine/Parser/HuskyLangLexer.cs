//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from HuskyLang.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class HuskyLangLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, INT=4, DOUBLE=5, PI=6, E=7, POW=8, ID=9, CHAR=10, 
		PLUS=11, MINUS=12, MULT=13, DIV=14, EQUAL=15, GTE=16, GT=17, LTE=18, LT=19, 
		NEQ=20, AND=21, OR=22, NOT=23, LPAR=24, RPAR=25, WS=26, NL=27;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "INT", "DOUBLE", "PI", "E", "POW", "ID", "CHAR", 
		"PLUS", "MINUS", "MULT", "DIV", "EQUAL", "GTE", "GT", "LTE", "LT", "NEQ", 
		"AND", "OR", "NOT", "LPAR", "RPAR", "WS", "NL"
	};


	public HuskyLangLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public HuskyLangLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'['", "']'", "','", null, null, "'pi'", "'e'", "'^'", null, null, 
		"'+'", "'-'", "'*'", "'/'", "'='", "'>='", "'>'", "'<='", "'<'", null, 
		"'&'", "'|'", "'!'", "'('", "')'", null, "'\\n'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "INT", "DOUBLE", "PI", "E", "POW", "ID", "CHAR", 
		"PLUS", "MINUS", "MULT", "DIV", "EQUAL", "GTE", "GT", "LTE", "LT", "NEQ", 
		"AND", "OR", "NOT", "LPAR", "RPAR", "WS", "NL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "HuskyLang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static HuskyLangLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,27,140,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,1,0,1,0,1,1,1,1,
		1,2,1,2,1,3,4,3,63,8,3,11,3,12,3,64,1,4,4,4,68,8,4,11,4,12,4,69,1,4,1,
		4,4,4,74,8,4,11,4,12,4,75,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,5,8,87,8,
		8,10,8,12,8,90,9,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,
		1,14,1,15,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,19,
		1,19,3,19,118,8,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,
		25,4,25,131,8,25,11,25,12,25,132,1,25,1,25,1,26,1,26,1,26,1,26,0,0,27,
		1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
		29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,
		53,27,1,0,4,1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,
		122,3,0,9,10,13,13,32,32,145,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,
		0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,
		0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
		1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,
		0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
		1,0,0,0,0,53,1,0,0,0,1,55,1,0,0,0,3,57,1,0,0,0,5,59,1,0,0,0,7,62,1,0,0,
		0,9,67,1,0,0,0,11,77,1,0,0,0,13,80,1,0,0,0,15,82,1,0,0,0,17,84,1,0,0,0,
		19,91,1,0,0,0,21,93,1,0,0,0,23,95,1,0,0,0,25,97,1,0,0,0,27,99,1,0,0,0,
		29,101,1,0,0,0,31,103,1,0,0,0,33,106,1,0,0,0,35,108,1,0,0,0,37,111,1,0,
		0,0,39,117,1,0,0,0,41,119,1,0,0,0,43,121,1,0,0,0,45,123,1,0,0,0,47,125,
		1,0,0,0,49,127,1,0,0,0,51,130,1,0,0,0,53,136,1,0,0,0,55,56,5,91,0,0,56,
		2,1,0,0,0,57,58,5,93,0,0,58,4,1,0,0,0,59,60,5,44,0,0,60,6,1,0,0,0,61,63,
		7,0,0,0,62,61,1,0,0,0,63,64,1,0,0,0,64,62,1,0,0,0,64,65,1,0,0,0,65,8,1,
		0,0,0,66,68,7,0,0,0,67,66,1,0,0,0,68,69,1,0,0,0,69,67,1,0,0,0,69,70,1,
		0,0,0,70,71,1,0,0,0,71,73,5,46,0,0,72,74,7,0,0,0,73,72,1,0,0,0,74,75,1,
		0,0,0,75,73,1,0,0,0,75,76,1,0,0,0,76,10,1,0,0,0,77,78,5,112,0,0,78,79,
		5,105,0,0,79,12,1,0,0,0,80,81,5,101,0,0,81,14,1,0,0,0,82,83,5,94,0,0,83,
		16,1,0,0,0,84,88,7,1,0,0,85,87,7,2,0,0,86,85,1,0,0,0,87,90,1,0,0,0,88,
		86,1,0,0,0,88,89,1,0,0,0,89,18,1,0,0,0,90,88,1,0,0,0,91,92,7,2,0,0,92,
		20,1,0,0,0,93,94,5,43,0,0,94,22,1,0,0,0,95,96,5,45,0,0,96,24,1,0,0,0,97,
		98,5,42,0,0,98,26,1,0,0,0,99,100,5,47,0,0,100,28,1,0,0,0,101,102,5,61,
		0,0,102,30,1,0,0,0,103,104,5,62,0,0,104,105,5,61,0,0,105,32,1,0,0,0,106,
		107,5,62,0,0,107,34,1,0,0,0,108,109,5,60,0,0,109,110,5,61,0,0,110,36,1,
		0,0,0,111,112,5,60,0,0,112,38,1,0,0,0,113,114,5,60,0,0,114,118,5,62,0,
		0,115,116,5,33,0,0,116,118,5,61,0,0,117,113,1,0,0,0,117,115,1,0,0,0,118,
		40,1,0,0,0,119,120,5,38,0,0,120,42,1,0,0,0,121,122,5,124,0,0,122,44,1,
		0,0,0,123,124,5,33,0,0,124,46,1,0,0,0,125,126,5,40,0,0,126,48,1,0,0,0,
		127,128,5,41,0,0,128,50,1,0,0,0,129,131,7,3,0,0,130,129,1,0,0,0,131,132,
		1,0,0,0,132,130,1,0,0,0,132,133,1,0,0,0,133,134,1,0,0,0,134,135,6,25,0,
		0,135,52,1,0,0,0,136,137,5,10,0,0,137,138,1,0,0,0,138,139,6,26,0,0,139,
		54,1,0,0,0,7,0,64,69,75,88,117,132,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
